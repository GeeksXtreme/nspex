package org.whired.nspex.blackbox;

import java.security.SecureRandom;
import java.sql.ResultSet;
import java.sql.SQLException;

import org.whired.nspex.blackbox.sql.SQLiteDatabase;

/**
 * Manages user accounts
 * @author Whired
 */
public class AccountManager {
	/** The database to use when verifying and saving information */
	private final SQLiteDatabase database;

	/** Stores randomly generated bytes for salting */
	private static final byte[] saltBytes = new byte[64];

	/** Used for generating random bytes */
	private static final SecureRandom sr = new SecureRandom();

	/** Used for hex encoding */
	private static final char[] hexChar = "0123456789ABCDEF".toCharArray();

	/**
	 * Creates a new account manager that utilizes the specified database
	 * @param database the database this account manager will use when verifying and saving information
	 */
	public AccountManager(final SQLiteDatabase database) {
		this.database = database;
	}

	/**
	 * Determines whether or not the specified credentials are valid
	 * @param userid the userid to check
	 * @param password the password to check
	 * @return {@code true} if the credentials are valid, otherwise {@code false}
	 * @throws SQLException if a database error occurs
	 */
	public boolean credentialsValid(final String userid, final String password) throws SQLException {
		// Grab credentials from the db
		final ResultSet rs = database.executeQuery("SELECT user_pass,user_salt FROM user WHERE user_id = '" + userid + "'");
		final String storedPassHash = rs.getString(1);
		final String storedSalt = rs.getString(2);
		rs.close();

		// Recompute the stored hash with provided password
		final String saltPassCryptoHash = org.apache.commons.codec.digest.DigestUtils.sha512Hex(storedSalt + password);

		return saltPassCryptoHash.equals(storedPassHash);
	}

	/**
	 * Creates an account with the specified credentials
	 * @param userid the userid to create
	 * @param password the password to create
	 * @throws SQLException when a database error occurs
	 */
	public void createAccount(final String userid, final String password) throws SQLException {
		final String salt = generateSalt();
		final String saltedCryptoHash = org.apache.commons.codec.digest.DigestUtils.sha512Hex(salt + password);
		database.executeStatement("insert into user (user_id, user_pass, user_salt) values ('" + userid + "', '" + saltedCryptoHash + "', '" + salt + "')", true);
	}

	/**
	 * Determines whether or not an account exists for the specified userid
	 * @param userid the userid to check
	 * @return {@code true} if the userid exists, otherwise {@code false}
	 * @throws SQLException
	 */
	public boolean accountExists(final String userid) throws SQLException {
		final ResultSet rs = database.executeQuery("SELECT * FROM user WHERE user_id = '" + userid + "'");
		final boolean result = rs.next();
		rs.close();
		return result;
	}

	/**
	 * Generates a random 512-bit salt encoded to hexadecimal
	 * @return the randomly generated hex-encoded string
	 */
	public static String generateSalt() {
		sr.nextBytes(saltBytes); // Generate random bytes
		return toHex(saltBytes);
	}

	/**
	 * Encodes the specified bytes to hex format
	 * @param bytes the bytes to encode
	 * @return the hex-encoded string
	 */
	private static final String toHex(final byte[] bytes) {
		char[] hexChars = new char[bytes.length * 2];
		for (int j = 0; j < bytes.length; j++) {
			int v = bytes[j] & 0xFF;
			hexChars[j * 2] = hexChar[v >>> 4];
			hexChars[j * 2 + 1] = hexChar[v & 0x0F];
		}
		return new String(hexChars);
	}
}
